#!/bin/rc

rfork e

opts=()
args=()

fn fakeroot {
	# Move our script to the private root
	ramfs -p
	mkdir /tmp/fakegit
	cp $0 /tmp/fakegit/git
	bind -bc /tmp/fakegit /bin
}

fn cmd_exit{
	echo Exiting compatibility mode
	rm -rf /tmp/fakegit
}

fn cmd_init{
	while(~ $#* 0){
		switch($1){
		case --bare
			opts=(-b)
		case -- 
			# go likes to use these
		case -*
			die unknown command init $*
		case *
			args=($args $1)
		}
		shift
	}
	ls >[1=2]
	/$cputype/bin/git/init $opts $args
}

fn cmd_clone{
	branch=()
	while( ! ~ $#* 0){
		switch($1){
		case -b
			branch=$2
			shift
		case --
			# go likes to use these
		case -*
			die unknown command clone $*
		case *
			args=($args $1)
		}
		shift
	}
	/$cputype/bin/git/clone $opts $args
	if(~ $#branch 1)
		/$cputype/bin/git/branch -n -b $1 origin/$1
}

fn cmd_pull{
	if(~ $1 -*)
		die unknown command pull $*
	/$cputype/bin/git/pull
}

fn cmd_fetch{
	while(~ $#* 0){
		switch($1){
		case --all
			opts=($opts -a)
		case -f
			opts=($opts -u $2)
			shift
		case --
 			# go likes to use these
		case -*
			die unknown command clone $*
		case *
			args=($args $1)
		}
		shift
	}	
	/$cputype/bin/git/pull -f $opts
}


fn cmd_checkout{
	if(~ $1 -*)
		die unknown command pull $*
	if(~ $#* 0)
		die git checkout branch
	/$cputype/bin/git/branch $b
}

fn rev-parse{
	while(~ $1 -*){
		switch($1){
		case --git-dir
			echo .git
			shift
		case --abbrev-ref
			echo `{dcmd git9/branch | sed s@^heads/@@g}
			shift
		case *
			dprint option $opt
		}
		shift
	}
}

fn cmd_show-ref{
	if(~ $1 -*)
		die unknown command pull $*
	for(b in `{cd .dcmd git/refs/ && walk -f})
		echo`{cat .dcmd git/refs/$b} refs/$b 
}

fn cmd_remote{
	if(! ~ $1 add)
		die unimplemented remote cmd $*
	>>.git/config{
		echo '[remote "'$2'"]'
		echo '	url='$3
	}
}

fn cmd_submodule{
	submodule $*
}

fn cmd_version{
	echo git version 2.2.0
}

fn cmd_config{
	config $*
}

fn cmd_status{
	# If we aren't in a git, throw error
	/$cputype/bin/git/fs || exit
	/$cputype/bin/git/walk -fRMA
}

fn usage{
	echo 'git <command> <args>' >[1=2]
	exit usage
}

if( test -d /bin/git ){
	fakeroot
	echo entering compatibility mode
	echo type `git exit` to return
	exit
}

if(! test -d .git){
	echo commands currently do not work outside of a proper git repo
	exit
}

cmd_$1 $*(2-)
